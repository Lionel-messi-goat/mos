import RPi.GPIO as GPIO
import time
import Adafruit_DHT
import cv2
import paho.mqtt.client as mqtt
from flask import Flask, render_template, Response, jsonify, request

# 핀 번호 설정
trigger_pin = 20  # 초음파 센서 Trigger 핀
echo_pin = 16     # 초음파 센서 Echo 핀
led1_pin = 5      # 첫 번째 LED 핀 (초록색)
led2_pin = 6      # 두 번째 LED 핀 (빨간색)
dht_pin = 4       # DHT 센서 핀

# MQTT 설정
mqtt_broker_ip = "192.168.137.66"  # 브로커 IP 주소
client = mqtt.Client()
client.connect(mqtt_broker_ip, 1883, 60)
client.loop_start()

# GPIO 초기화
GPIO.setmode(GPIO.BCM)
GPIO.setup(trigger_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)
GPIO.setup(led1_pin, GPIO.OUT)
GPIO.setup(led2_pin, GPIO.OUT)

# 카메라 초기화 (cv2.VideoCapture 사용)
camera = cv2.VideoCapture(0)  # 0번 카메라를 사용

# Flask 애플리케이션 생성
app = Flask(__name__)

# 이전 거리 상태 저장 변수
prev_distance_within_10cm = False

# 재고 관리 데이터
inventory = [
    {"name": "금괴", "quantity": 5},
    {"name": "은화", "quantity": 10},
]

# 초음파 센서를 사용하여 거리 측정
def get_distance():
    GPIO.output(trigger_pin, True)
    time.sleep(0.00001)
    GPIO.output(trigger_pin, False)
    
    start_time = time.time()
    stop_time = time.time()

    while GPIO.input(echo_pin) == 0:
        start_time = time.time()
    
    while GPIO.input(echo_pin) == 1:
        stop_time = time.time()

    elapsed_time = stop_time - start_time
    distance = (elapsed_time * 34300) / 2
    return distance

# 온도 및 습도 데이터 읽기
def get_temperature_humidity():
    sensor = Adafruit_DHT.DHT11
    humidity, temperature = Adafruit_DHT.read_retry(sensor, dht_pin)
    return temperature, humidity

# 비디오 스트리밍 생성
def generate_video():
    while True:
        success, frame = camera.read()
        if not success:
            break
        _, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

# Flask 라우트 정의
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(generate_video(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/data')
def data():
    temperature, humidity = get_temperature_humidity()
    distance = get_distance()
    data = {
        "temperature": temperature,
        "humidity": humidity,
        "distance": distance
    }
    return jsonify(data)

@app.route('/inventory', methods=['GET', 'POST'])
def inventory_management():
    global inventory
    if request.method == 'POST':
        item_name = request.json.get('name')
        quantity = request.json.get('quantity')
        for item in inventory:
            if item["name"] == item_name:
                item["quantity"] = quantity
                return jsonify({"message": "재고가 업데이트되었습니다."}), 200
        inventory.append({"name": item_name, "quantity": quantity})
        return jsonify({"message": "새 항목이 추가되었습니다."}), 201
    return jsonify(inventory)

# 주요 루프
try:
    while True:
        temperature, humidity = get_temperature_humidity()
        distance = get_distance()

        # LED 상태 변경 및 영상 활성화
        if distance >= 11:  # 11cm 이상일 때 경고 상태로 전환
            GPIO.output(led1_pin, False)  # 초록 LED 꺼짐
            GPIO.output(led2_pin, True)   # 빨간 LED 켜짐
            print("경고: 금고 문 열림 감지!")
            client.publish("safe/alert", "경고: 금고 문 열림 감지!")
        else:
            GPIO.output(led1_pin, True)   # 초록 LED 켜짐
            GPIO.output(led2_pin, False)  # 빨간 LED 꺼짐

        # MQTT로 온습도 데이터 전송
        if temperature and humidity:
            client.publish("safe/temperature", f"{temperature}°C")
            client.publish("safe/humidity", f"{humidity}%")

        time.sleep(1)

except KeyboardInterrupt:
    print("프로그램 종료 중...")
finally:
    camera.release()
    GPIO.cleanup()
