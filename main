import time
import board
import adafruit_htu21d
import RPi.GPIO as GPIO
import paho.mqtt.client as mqtt
from flask import Flask, render_template, Response, jsonify
import cv2
import busio
import logging

# 핀 번호 설정
trigger_pin = 20  # 초음파 센서 Trigger 핀
echo_pin = 16     # 초음파 센서 Echo 핀
led1_pin = 5      # 첫 번째 LED 핀 (초록색)
led2_pin = 6      # 두 번째 LED 핀 (빨간색)

# MQTT 설정
mqtt_broker_ip = "192.168.137.66"  # 브로커 IP 주소
client = mqtt.Client()
client.connect(mqtt_broker_ip, 1883, 60)
client.loop_start()

# GPIO 초기화
GPIO.setmode(GPIO.BCM)
GPIO.setup(trigger_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)
GPIO.setup(led1_pin, GPIO.OUT)
GPIO.setup(led2_pin, GPIO.OUT)

# 카메라 초기화
camera = cv2.VideoCapture(0)  # 0번 카메라를 사용

# I2C 초기화 (HTU21D 센서 사용)
i2c = busio.I2C(board.SCL, board.SDA)
sensor = adafruit_htu21d.HTU21D(i2c)

# 초음파 센서를 사용하여 거리 측정
def get_distance():
    GPIO.output(trigger_pin, True)
    time.sleep(0.00001)
    GPIO.output(trigger_pin, False)
    
    start_time = time.time()
    stop_time = time.time()

    while GPIO.input(echo_pin) == 0:
        start_time = time.time()
    
    while GPIO.input(echo_pin) == 1:
        stop_time = time.time()

    elapsed_time = stop_time - start_time
    distance = (elapsed_time * 34300) / 2
    return distance

# 비디오 스트리밍 생성
def generate_video():
    while True:
        success, frame = camera.read()
        if not success:
            break
        _, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

# Flask 애플리케이션 생성
app = Flask(__name__)

# 로깅 설정
logging.basicConfig(level=logging.DEBUG)

# 이전 거리 상태 저장 변수
prev_distance_within_10cm = False

@app.route('/')
def index():
    print("웹 페이지 접속됨!")  # 접속 시 콘솔에 출력
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(generate_video(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/data')
def data():
    # HTU21D 센서에서 온도 및 습도 읽기
    temperature = sensor.temperature  # 온도 (°C)
    humidity = sensor.relative_humidity  # 습도 (%)
    
    # 초음파 센서로 거리 측정
    distance = get_distance()
    
    # 센서 데이터를 웹페이지로 전달
    data = {
        "temperature": temperature,
        "humidity": humidity,
        "distance": distance
    }
    return jsonify(data)

# 주요 루프
@app.before_first_request
def before_first_request():
    print("서버 시작됨!")  # 서버가 시작될 때 출력

try:
    while True:
        # HTU21D 센서로 온도 및 습도 읽기
        temperature = sensor.temperature
        humidity = sensor.relative_humidity

        # 초음파 센서로 거리 측정
        distance = get_distance()

        # LED 상태 변경 및 영상 활성화
        if distance >= 11:  # 11cm 이상일 때 경고 상태로 전환
            GPIO.output(led1_pin, False)  # 초록 LED 꺼짐
            GPIO.output(led2_pin, True)   # 빨간 LED 켜짐
            print("경고: 금고 문 열림 감지!")  # 경고 메시지 콘솔 출력
            client.publish("safe/alert", "경고: 금고 문 열림 감지!")
        else:
            GPIO.output(led1_pin, True)   # 초록 LED 켜짐
            GPIO.output(led2_pin, False)  # 빨간 LED 꺼짐

        # MQTT로 온습도 데이터 전송
        client.publish("safe/temperature", f"{temperature}°C")
        client.publish("safe/humidity", f"{humidity}%")

        time.sleep(1)

except KeyboardInterrupt:
    print("프로그램 종료 중...")
finally:
    camera.release()
    GPIO.cleanup()

if __name__ == '__main__':
    # Flask 앱 실행
    app.run(host='0.0.0.0', port=8080, debug=True)
