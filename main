import time
import board
import adafruit_htu21d
import RPi.GPIO as GPIO
from flask import Flask, render_template, Response, jsonify
import cv2
import busio

# 핀 번호 설정
trigger_pin = 20  # 초음파 센서 Trigger 핀
echo_pin = 16     # 초음파 센서 Echo 핀
led1_pin = 5      # 첫 번째 LED 핀 (초록색)
led2_pin = 6      # 두 번째 LED 핀 (빨간색)

# GPIO 초기화
GPIO.setmode(GPIO.BCM)
GPIO.setup(trigger_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)
GPIO.setup(led1_pin, GPIO.OUT)
GPIO.setup(led2_pin, GPIO.OUT)

# 카메라 초기화
camera = cv2.VideoCapture(0)  # 0번 카메라를 사용

# I2C 초기화 (HTU21D 센서 사용)
i2c = busio.I2C(board.SCL, board.SDA)
sensor = adafruit_htu21d.HTU21D(i2c)

# 초음파 센서를 사용하여 거리 측정
def get_distance():
    GPIO.output(trigger_pin, True)
    time.sleep(0.00001)
    GPIO.output(trigger_pin, False)
    
    start_time = time.time()
    stop_time = time.time()

    while GPIO.input(echo_pin) == 0:
        start_time = time.time()
    
    while GPIO.input(echo_pin) == 1:
        stop_time = time.time()

    elapsed_time = stop_time - start_time
    distance = (elapsed_time * 34300) / 2
    return distance

# 비디오 스트리밍 생성
def generate_video():
    while True:
        success, frame = camera.read()
        if not success:
            break
        _, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

# Flask 애플리케이션 생성
app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(generate_video(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/data')
def data():
    # HTU21D 센서에서 온도 및 습도 읽기
    temperature = sensor.temperature  # 온도 (°C)
    humidity = sensor.relative_humidity  # 습도 (%)
    
    # 초음파 센서로 거리 측정
    distance = get_distance()
    
    # 센서 데이터를 웹페이지로 전달
    data = {
        "temperature": temperature,
        "humidity": humidity,
        "distance": distance
    }
    return jsonify(data)

# 주요 루프 (Flask 서버에서 사용)
@app.before_first_request
def before_first_request():
    # 반복적으로 센서 측정 및 LED 제어
    def update_sensor_data():
        while True:
            # 초음파 센서로 거리 측정
            distance = get_distance()

            # LED 상태 변경
            if distance >= 11:  # 11cm 이상일 때 경고 상태로 전환
                GPIO.output(led1_pin, False)  # 초록 LED 꺼짐
                GPIO.output(led2_pin, True)   # 빨간 LED 켜짐
                print("경고: 금고 문 열림 감지!")
            else:
                GPIO.output(led1_pin, True)   # 초록 LED 켜짐
                GPIO.output(led2_pin, False)  # 빨간 LED 꺼짐

            time.sleep(1)

    # 주 스레드에서 센서 업데이트 시작
    import threading
    threading.Thread(target=update_sensor_data, daemon=True).start()

# Flask 애플리케이션 실행
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
